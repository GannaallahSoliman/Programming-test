/*
	The first working version of Stroustrup's calculator.
	Written by Renátó Besenczi based on the book BS, "Programming: Principles and Practice using C++, Second Edition"
	See chapter 6 and chapter 7 of book: https://stroustrup.com/programming.html
	© 2020 Renátó Besenczi, according to CC0. Questions: renato.besenczi@gmail.com
	Input from cin; output to cout. Input comes from cin through the Token_stream called ts.
	Grammar:

	Calculation:
		Statement
		Print
		Quit
		Calculation Statement
	Print:
		;
	Quit:
		q
	Statement:
		Declaration
		Expression
	Declaration:
		"let" Name "=" Expression
	Name:
		string literal
	Expression:
		Term
		Expression + Term
		Expression – Term
	Term:
		Primary
		Term * Primary
		Term / Primary
		Term % Primary
	Primary:
		Number
		( Expression )
		– Primary
		+ Primary
	Number:
		floating-point-literal
*/

#include "std_lib_facilities.h" //Include usual header

// Some symbolic constants for clarity
constexpr char number = '8';
constexpr char quit = 'q';
constexpr char print = ';';
constexpr char name = 'a';
constexpr char let = '#';
constexpr char result = '=';
constexpr char square = 's'; /*declare token kind*/
constexpr char power = 'p'; /*declare token kind*/
const string powkey = "pow"; /*this key is used in the program*/
const string sqrtkey = "sqrt"; /*this key is used in the program*/

//function declarations
double expression();
double primary();
double term();
double declaration();
double statement();

// Variable
class Variable
{
public:
    string name;
    double value;
};

vector<Variable> var_table;

bool is_declared(string var)
{
    for (const auto& v : var_table)
        if (v.name == var) return true;
    return false;
}

double define_name (string var, double val)
{
    if (is_declared(var)) error(var, " declared twice");
    var_table.push_back(Variable{var,val});
    return val;
}

double get_value(string s)
{
    for(const auto& v : var_table)
        if (v.name == s) return v.value;
    error("get: undefined variable", s);
    return -1;
}

void set_value(string s, double d)
{
    for (auto& v : var_table)
        if(v.name == s)
        {
            v.value = d;
            return;
        }
    error("set: undefined variable", s);
}
// Variable end ///////////////////////

// Token ///////////////////////
class Token
{
public:
    char kind;
    double value;
    string name;
    Token(): kind(0) {}
    Token(char ch): kind(ch), value(0) {}
    Token(char ch, double val): kind(ch), value(val) {}
    Token(char ch, string n): kind(ch), name(n) {}
};
// Token end ///////////////////////

// Token_stream ///////////////////////
class Token_stream
{
public:
    Token_stream();
    void putback(Token t);
    Token get();
    void ignore(char c);
private:
    bool full;
    Token buffer;
};

Token_stream::Token_stream() :full(false), buffer(0) {}

void Token_stream::putback(Token t)
{
    if (full) error("putback() into full buffer");
    buffer = t;
    full = true;
}

Token Token_stream::get()
{
    if (full)
    {
        full = false;
        return buffer;
    }

    char ch;
    cin >> ch;

    switch (ch)
    {
    case print:
    case quit:
    case let:
    case '(':
    case ')':
    case ',': /*this is need for the power function as it gives bad token if this is missing*/
    case '+':
    case '-':
    case '*':
    case '/':
    case '%':
    case '=':
        return Token(ch);
    case '.':
    case '0':
    case '1':
    case '2':
    case '3':
    case '4':
    case '5':
    case '6':
    case '7':
    case '8':
    case '9':
    {
        cin.putback (ch);
        double val;
        cin >> val;
        return Token(number, val);
    }
    default:
    {
        if (isalpha(ch))
        {
            string s;
            s += ch;
            while (cin.get(ch) && (isalpha(ch) || isdigit(ch))) s += ch;
            cin.putback(ch);
            if(s==sqrtkey)
                return Token{square}; /*if sqrt is used in the program return token with kind sqrt*/
            if(s==powkey)
                return Token{power}; /*if pow is used in the program return token with kind pow*/
            if (s == "exit")
                return Token(quit); /*if exit is entered the program returns quit and exits the program*/
            return Token{name,s};
        }
        error("Bad token");
    }
    return 0;
    }
}

void Token_stream::ignore(char c)
{
    if (full && c == buffer.kind)
    {
        full = false;
        return;
    }

    full = false;

    char ch = 0;
    while (cin>>ch)
        if (ch==c) return;
}
// Token_stream end ///////////////////////
Token_stream ts;

void clean_up_mess()
{
    ts.ignore(print);
}

// Logically separate calculate() from the usual "boiler plate" of main
void calculate()
{
    while (cin)
        try
        {
            Token t = ts.get();
            while (t.kind == print) t = ts.get();
            if (t.kind == quit) return;
            ts.putback(t);
            cout << result << statement() << endl;
        }
        catch (exception& e)
        {
            cerr << e.what() << endl;
            clean_up_mess();
        }
}

double calc_sqrt() /*square root function*/
{
    Token t = ts.get(); /*moves the pointer to next value*/
    if (t.kind != '(') error("'(' expected");
    double n = expression(); /*in case of an expression '1+2' solves it ans saves it in n*/
    if (n < 0) error("cannot square negative number");
    t = ts.get(); /*moves the pointer to next value*/
    if (t.kind != ')') error("')' expected");
    return sqrt(n); /*solves answer and prints it*/
}

double calc_pow() /*power function*/
{
    Token t = ts.get(); /*moves the pointer to next value*/
    if (t.kind != '(') error("'(' expected");
    double base = expression(); /*in case of an expression '1+2' solves it ans saves it in base*/
    t = ts.get(); /*moves the pointer to next value*/
    if (t.kind != ',') error("',' expected");
    int power = narrow_cast<int>(expression()); /*to make sure the power is an integer*/
    t = ts.get(); /*moves the pointer to next value*/
    if (t.kind != ')') error("')' expected");
    return pow(base, power); /*solves answer and prints it*/
}

int main()
try
{

    define_name("pi", 3.1415926535);
    define_name("e", 2.7182818284);
    define_name("k",10000); /* 6. Add a predefined name k meaning 1000.*/

    calculate();

    return 0;

}
catch (exception& e)
{
    cerr << e.what() << endl;
    return 1;
}
catch (...)
{
    cerr << "exception\n";
    return 2;
}

//Functions mapping grammar rules //////////////////////////
double primary()
{
    Token t = ts.get();
    switch (t.kind)
    {
    case '(':
    {
        double d = expression();
        t = ts.get();
        if (t.kind != ')') error("')' expected");
        return d;
    }
    case number:
        return t.value;
    case '-':
        return - primary();
    case '+':
        return primary();
    case square:
        return calc_sqrt();
    case power:
        return calc_pow();
    case name:
        return get_value(t.name); /*gets the value of the entered name (for #)*/
    default:
        error("primary expected");
    }
    return -1;
}

double term()
{
    double left = primary();
    Token t = ts.get();
    while(true)
    {
        switch (t.kind)
        {
        case '*':
            left *= primary();
            t = ts.get();
            break;
        case '/':
        {
            double d = primary();
            if (d == 0) error("divide by zero");
            left /= d;
            t = ts.get();
            break;
        }
        case '%':
        {
            double d = primary();
            if (d == 0) error("%: divide by zero");
            left = fmod (left, d);
            t = ts.get();
            break;
        }
        default:
            ts.putback(t);
            return left;
        }
    }
}

double expression()
{
    double left = term();
    Token t = ts.get();
    while (true)
    {
        switch(t.kind)
        {
        case '+':
            left += term();
            t = ts.get();
            break;
        case '-':
            left -= term();
            t = ts.get();
            break;
        default:
            ts.putback(t);
            return left;
        }
    }
}

double declaration()
{
    Token t = ts.get();
    if (t.kind != name) error("name expected in declaration");
    string var_name = t.name;

    Token t2 = ts.get();
    if (t2.kind != '=') error("= missing in declaration of ", var_name);

    double d = expression();
    define_name(var_name, d);
    return d;
}

double statement()
{
    Token t = ts.get();
    switch(t.kind)
    {
    case let:
        return declaration();
    default:
        ts.putback(t);
        return expression();
    }
}
